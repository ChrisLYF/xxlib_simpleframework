#include "xx_luahelper.h"
#include <iostream>

// types defines
/***********************************************************************/

struct A;
struct B;
struct C;
struct Factor
{
	A* CreateA();
	B* CreateB();
	C* CreateC();
	C CreateStructC();
	void NeedA(A* a);
	void NeedB(B* b);
	void NeedC(C* c);
};
struct A {};
struct B : A {};
struct C : B {};

// MP defines
/***********************************************************************/

typedef xx::MemPool<A, B, C, Factor> MP;

// impls
/***********************************************************************/

A* Factor::CreateA()
{
	return nullptr;
}
B* Factor::CreateB()
{
	return nullptr;
}
C* Factor::CreateC()
{
	return nullptr;
}
C Factor::CreateStructC()
{
	return C();
}
void Factor::NeedA(A* a)
{
	std::cout << "NeedA" << std::endl;
}
void Factor::NeedB(B* b)
{
	std::cout << "NeedB" << std::endl;
}
void Factor::NeedC(C* c)
{
	std::cout << "NeedC" << std::endl;
}

// main
/***********************************************************************/

int main()
{
	MP mp;
	auto L = xx::Lua_NewState(mp);

	xx::Lua_PushMetatable<MP, Factor>(L);
	xxLua_BindFunc(MP, L, Factor, CreateA, false);
	xxLua_BindFunc(MP, L, Factor, CreateB, false);
	xxLua_BindFunc(MP, L, Factor, CreateC, false);
	xxLua_BindFunc(MP, L, Factor, CreateStructC, false);
	xxLua_BindFunc(MP, L, Factor, NeedA, false);
	xxLua_BindFunc(MP, L, Factor, NeedB, false);
	xxLua_BindFunc(MP, L, Factor, NeedC, false);
	lua_pop(L, 1);

	xx::Lua_SetGlobal<MP>(L, "factor", Factor());
	auto rtv = luaL_dostring(L, R"%%(

local pointer_a = factor:CreateA()
local pointer_b = factor:CreateB()
local pointer_c = factor:CreateC()
local struct_c  = factor:CreateStructC()

print( "test struct to pointer & inherit check" )
factor:NeedA( struct_c )		-- ok
factor:NeedB( struct_c )		-- ok
factor:NeedC( struct_c )		-- ok

print( "test pointer & inherit check" )
factor:NeedA( pointer_a )		-- ok
factor:NeedB( pointer_b )		-- ok
factor:NeedC( pointer_c )		-- ok
factor:NeedA( pointer_a )		-- ok
factor:NeedA( pointer_b )		-- ok
factor:NeedA( pointer_c )		-- ok

print( "test inherit check fail begin" )
factor:NeedC( pointer_a )		-- err
factor:NeedC( pointer_b )		-- err
print( "test inherit check fail end" )


)%%");
	if (rtv)
	{
		std::cout << lua_tostring(L, -1) << std::endl;
	}

	lua_close(L);
	std::cin.get();
	return 0;
}
