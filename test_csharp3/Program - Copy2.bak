using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

namespace xx
{
    public static class LogInterop
    {
        [DllImport("xxloglib", CallingConvention = CallingConvention.Cdecl)]
        internal static extern IntPtr xxlogNew(IntPtr fn);

        [DllImport("xxloglib", CallingConvention = CallingConvention.Cdecl)]
        internal static extern IntPtr xxlogWriteAll(IntPtr ctx, int level, long time
            , IntPtr machine, IntPtr service, IntPtr instanceId
            , IntPtr title, long opcode, IntPtr desc);

        [DllImport("xxloglib", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void xxlogSetDefaultValue(IntPtr ctx, IntPtr machine, IntPtr service, IntPtr instanceId);

        [DllImport("xxloglib", CallingConvention = CallingConvention.Cdecl)]
        internal static extern IntPtr xxlogWrite(IntPtr ctx, int level, IntPtr title, long opcode, IntPtr desc);

        [DllImport("xxloglib", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void xxlogBeginTrans(IntPtr ctx);

        [DllImport("xxloglib", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void xxlogEndTrans(IntPtr ctx);

        [DllImport("xxloglib", CallingConvention = CallingConvention.Cdecl)]
        internal static extern void xxlogDelete(IntPtr ctx);

        internal static string Utf8IntPtrToString(this IntPtr p)
        {
            if (p == IntPtr.Zero) return null;
            var bytes = new List<byte>();
            for (int offset = 0; ; offset++)
            {
                byte b = Marshal.ReadByte(p, offset);
                if (b == 0) break;
                else bytes.Add(b);
            }
            return Encoding.UTF8.GetString(bytes.ToArray(), 0, bytes.Count);
        }
    }

    public class Logger : IDisposable
    {
        public enum Level
        {
            Off = 0,
            Fatal = 1,
            Error = 2,
            Warning = 3,
            Info = 4,
            Debug = 5,
            All = 6,
        };

        IntPtr ctx;

        /// <summary>
        /// 根据文件名 创建日志 db 文件. 成功返回 Logger 的指针 ctx. 失败返回 空
        /// </summary>
        public Logger(string fn = null)
        {
            if (string.IsNullOrWhiteSpace(fn))
            {
                fn = Process.GetCurrentProcess().MainModule.FileName + ".log.db";
            }

            var h = GCHandle.Alloc(Encoding.UTF8.GetBytes(fn), GCHandleType.Pinned);
            ctx = LogInterop.xxlogNew(h.AddrOfPinnedObject());
            h.Free();

            if (ctx == IntPtr.Zero)
            {
                throw new Exception("New failed. fn = " + fn);
            }
        }

        /// <summary>
        /// 直接传所有日志参数, 记录日志. 返回 nullptr 表示成功( 失败返回错误信息 )
        /// </summary>
        public string WriteAll(Level level, long time, string machine, string service, string instanceId, string title, long opcode, string desc)
        {
            Debug.Assert(disposed);

            var hMachine = GCHandle.Alloc(Encoding.UTF8.GetBytes(machine), GCHandleType.Pinned);
            var hService = GCHandle.Alloc(Encoding.UTF8.GetBytes(service), GCHandleType.Pinned);
            var hInstanceId = GCHandle.Alloc(Encoding.UTF8.GetBytes(instanceId), GCHandleType.Pinned);
            var hTitle = GCHandle.Alloc(Encoding.UTF8.GetBytes(title), GCHandleType.Pinned);
            var hDesc = GCHandle.Alloc(Encoding.UTF8.GetBytes(desc), GCHandleType.Pinned);
            try
            {
                return LogInterop.xxlogWriteAll(ctx, (int)level, time, hMachine.AddrOfPinnedObject(), hService.AddrOfPinnedObject()
                    , hInstanceId.AddrOfPinnedObject(), hTitle.AddrOfPinnedObject(), opcode, hDesc.AddrOfPinnedObject()).Utf8IntPtrToString();
            }
            finally
            {
                hMachine.Free();
                hService.Free();
                hInstanceId.Free();
                hTitle.Free();
                hDesc.Free();
            }
        }

        /// <summary>
        /// 记录日志( 相比 WriteAll 缺失的参数 会去读默认值 ). 返回 nullptr 表示成功( 失败返回错误信息 )
        /// </summary>
        public string Write(Level level, string title, long opcode, string desc)
        {
            Debug.Assert(disposed);

            var hMachine = GCHandle.Alloc(Encoding.UTF8.GetBytes(title), GCHandleType.Pinned);
            var hService = GCHandle.Alloc(Encoding.UTF8.GetBytes(desc), GCHandleType.Pinned);
            try
            {
                return LogInterop.xxlogWrite(ctx, (int)level, hMachine.AddrOfPinnedObject()
                    , opcode, hService.AddrOfPinnedObject()).Utf8IntPtrToString();
            }
            finally
            {
                hMachine.Free();
                hService.Free();
            }
        }

        /// <summary>
        /// 设置一些不容易变化的项目的默认值, 以便使用 Write 时能反复写入这些数据 而不需要再传
        /// </summary>
        public void SetDefaultValue(string machine, string service, string instanceId)
        {
            Debug.Assert(disposed);

            var hMachine = GCHandle.Alloc(Encoding.UTF8.GetBytes(machine), GCHandleType.Pinned);
            var hService = GCHandle.Alloc(Encoding.UTF8.GetBytes(service), GCHandleType.Pinned);
            var hInstanceId = GCHandle.Alloc(Encoding.UTF8.GetBytes(instanceId), GCHandleType.Pinned);
            try
            {
                LogInterop.xxlogSetDefaultValue(ctx, hMachine.AddrOfPinnedObject()
                    , hService.AddrOfPinnedObject(), hInstanceId.AddrOfPinnedObject());
            }
            finally
            {
                hMachine.Free();
                hService.Free();
                hInstanceId.Free();
            }
        }

        /// <summary>
        /// 开始批写( 启动事务, 合并写入批次, 能提升性能, 但增加了数据损坏的可能性 ). 返回 nullptr 表示成功( 失败返回错误信息 )
        /// </summary>
        public void BeginTrans()
        {
            Debug.Assert(disposed);
            LogInterop.xxlogBeginTrans(ctx);
        }

        /// <summary>
        /// 结束批写( 提交事务 ). 返回 nullptr 表示成功( 失败返回错误信息 )
        /// </summary>
        public void EndTrans()
        {
            Debug.Assert(disposed);
            LogInterop.xxlogEndTrans(ctx);
        }

        #region Dispose

        private bool disposed = false;

        //Implement IDisposable.
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposed)
            {
                if (disposing)
                {
                    // Free other state (managed objects).
                }
                // Free your own state (unmanaged objects).
                // Set large fields to null.
                LogInterop.xxlogDelete(ctx);
                disposed = true;
            }
            // Call Dispose in the base class.
            //base.Dispose(disposing);
        }

        // Use C# destructor syntax for finalization code.
        ~Logger()
        {
            Dispose(false);
        }

        // The derived class does not have a Finalize method
        // or a Dispose method without parameters because it inherits
        // them from the base class.

        #endregion
    }
}

public static class Program
{
    static void Main(string[] args)
    {
        var sw = Stopwatch.StartNew();
        using (var log = new xx.Logger())
        {
            for (int j = 0; j < 1000; j++)
            {
                //log.BeginTrans();
                for (int i = 0; i < 1000; i++)
                {
                    log.WriteAll(xx.Logger.Level.Info, DateTime.Now.Ticks, "pc1", "test_csharp3"
                        , Guid.NewGuid().ToString(), "asdfjlaskdjf", 22, "hi 中文hello中文hello !");
                }
                //log.EndTrans();
            }
        }
        Console.WriteLine(sw.ElapsedMilliseconds);
    }
}

